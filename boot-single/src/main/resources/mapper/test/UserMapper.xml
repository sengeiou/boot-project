<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace ：命名空间，对 sql 进行分类化管理，用于隔离 sql 语句
注意：如果mapper代理方法开发，namespace有重要作用
在 xxxmapper.xml 中 namespace 等于 mapper 接口地址
-->
<mapper namespace="com.xzm.single.dao.UserMapper">

    <!--&lt;!&ndash;在映射文件中配置很多sql语句&ndash;&gt;-->

    <!--&lt;!&ndash; 开启本mapper的namespace下的二缓存-->
	<!--type：指定cache接口的实现类的类型，mybatis默认使用PerpetualCache-->
	<!--要和ehcache整合，需要配置type为ehcache实现cache接口的类型-->
	 <!--&ndash;&gt;-->
    <!--<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>-->

    <!--&lt;!&ndash;sql片段-->
    <!--id:唯一标识-->
    <!--经验：是基于单表来定义sql片段，这样的话sql片段的可重用性才高-->
    <!--一般不包含where-->
    <!--&ndash;&gt;-->
    <!--<sql id="query_user_where">-->
        <!--<if test="userCustom != null">-->
            <!--<if test="userCustom.sex != null and userCustom.sex != ''">-->
                <!--and user.sex = #{userCustom.sex}-->
            <!--</if>-->
            <!--<if test="userCustom.username != null">-->
                <!--and user.username like  '%${userCustom.username}%'-->
            <!--</if>-->
            <!--<if test="ids!=null">-->
                <!--&lt;!&ndash; 使用 foreach遍历传入ids-->
                <!--collection：指定输入 对象中集合属性-->
                <!--item：每个遍历生成对象中-->
                <!--open：开始遍历时拼接的串-->
                <!--close：结束遍历时拼接的串-->
                <!--separator：遍历的两个对象中需要拼接的串-->
                 <!--&ndash;&gt;-->
                <!--&lt;!&ndash; 使用实现下边的sql拼接：-->
                 <!--AND (id=1 OR id=10 OR id=16)-->
                 <!--&ndash;&gt;-->
                <!--<foreach collection="ids" item="user_id" open="AND (" close=")" separator="or">-->
                    <!--&lt;!&ndash; 每个遍历需要拼接的串 &ndash;&gt;-->
                    <!--id=#{user_id}-->
                <!--</foreach>-->

                <!--&lt;!&ndash; 实现  “ and id IN(1,10,16)”拼接 &ndash;&gt;-->
                <!--&lt;!&ndash; <foreach collection="ids" item="user_id" open="and id IN(" close=")" separator=",">-->
                    <!--每个遍历需要拼接的串-->
                    <!--#{user_id}-->
                <!--</foreach> &ndash;&gt;-->

            <!--</if>-->
        <!--</if>-->
    <!--</sql>-->



    <!--&lt;!&ndash;定义 resultMap-->
    <!--将select id id_, username username_ from user where id = #{value} 和User类中的属性做一个映射关系-->
    <!--type: resultMap最终映射的java对象类型-->
    <!--id:对resultMap的唯一标识-->
    <!--&ndash;&gt;-->
    <!--<resultMap id="userResultMap" type="user">-->
        <!--&lt;!&ndash;id表示查询结果中的唯一标识-->
        <!--column：查询出来的列名-->
        <!--property：type指定pojo的属性名-->
        <!--最终resultMap对column和property做一个映射关系（对应关系）-->
        <!--&ndash;&gt;-->
        <!--<id column="id_" property="id"/>-->

        <!--&lt;!&ndash;result: 对普通结果映射定义-->
        <!--column：查询出来的列名-->
        <!--property：type指定pojo的属性名-->
        <!--最终resultMap对column和property做一个映射关系（对应关系）-->
        <!--&ndash;&gt;-->
        <!--<result column="username_" property="username"/>-->
    <!--</resultMap>-->




    <!--&lt;!&ndash;用户信息综合查询-->
    <!--#{userCustom.sex} :取出pojo包装对象中的性别值-->
    <!--#{userCustom.username} :取出pojo包装对象中的用户名称-->

    <!--&ndash;&gt;-->
    <!--<select id="findUserList" parameterType="com.xzm.modules.test.po.UserQueryVo" resultType="com.xzm.modules.test.po.UserCustom">-->

        <!--select * from user-->
        <!--&lt;!&ndash;where可以自动的去掉条件中的第一个and&ndash;&gt;-->
        <!--<where>-->
            <!--&lt;!&ndash;refid: 指定sql片段的id，如果是写在其他的mapper文件中，则需要在前面加上namespace&ndash;&gt;-->
            <!--<include refid="query_user_where"/>-->
            <!--&lt;!&ndash;在这里还要引用其他的sql片段&ndash;&gt;-->
        <!--</where>-->

    <!--</select>-->


    <!--&lt;!&ndash;用户信息综合查询总数-->
    <!--parameterType:指定输入的类型和findUserList一样-->
    <!--resultType:输出结果类型为 int-->
    <!--&ndash;&gt;-->
    <!--<select id="findUserCount" parameterType="com.xzm.modules.test.po.UserQueryVo" resultType="int">-->

      <!--select count(*) from user-->
        <!--&lt;!&ndash;where可以自动的去掉条件中的第一个and&ndash;&gt;-->
        <!--<where>-->
            <!--&lt;!&ndash;refid: 指定sql片段的id，如果是写在其他的mapper文件中，则需要在前面加上namespace&ndash;&gt;-->
            <!--<include refid="query_user_where"/>-->
        <!--</where>-->

    <!--</select>-->


    <!--&lt;!&ndash;使用 resultMap 作为输出映射类型-->
        <!--resultMap="userResultMap":其中的userResultMap就是我们刚才定义的 resultMap 的id值，如果这个resultMap在其他的mapper文件中，前边须加上namespace-->
    <!--&ndash;&gt;-->
    <!--<select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">-->

        <!--select id id_, username username_ from user where id = #{value}-->

    <!--</select>-->

    <!--&lt;!&ndash;通过select执行数据库查询-->
        <!--id:标识映射文件中的sql-->
        <!--将sql语句封装到mappedStatement对象中，所以id称为Statement的id-->
        <!--#{}：表示占位符-->
        <!--#{id}：其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，那么#{}中的参数名可以任意，可以是value或者其他名称-->
        <!--parameterType：表示指定输入参数的类型-->
        <!--resultType：表示指定sql输出结果的所映射的java对象类型-->
    <!--&ndash;&gt;-->
    <!--&lt;!&ndash; 根据id获取用户信息 &ndash;&gt;-->
    <!--<select id="findUserById" parameterType="int" resultType="user" useCache="true">-->
        <!--select * from user where id = #{id}-->
    <!--</select>-->
    <!--&lt;!&ndash; 自定义条件查询用户列表,可能返回多条-->
         <!--resultType：指定就是单条记录所映射的java对象类型-->
         <!--${}:表示拼接sql串，将接收到的参数内容不加修饰的拼接在sql中-->
         <!--使用${}拼接sql，会引起sql注入-->
         <!--${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能够使用value-->
    <!--&ndash;&gt;-->
    <!--<select id="findUserByUsername" parameterType="java.lang.String" resultType="user">-->
        <!--select * from user where username like '%${value}%'-->
    <!--</select>-->

    <!--&lt;!&ndash; 添加用户 &ndash;&gt;-->
    <!--<insert id="insetrUser" parameterType="com.xzm.modules.test.po.User" flushCache="true">-->
        <!--&lt;!&ndash; selectKey将主键返回，需要再返回-->
             <!--parameterType：指定输入参数类型是 POJO （包括用户信息）-->
             <!--添加selectKey实现将主键返回-->
             <!--keyProperty:返回的主键存储在pojo中的哪个属性-->
             <!--order：selectKey的执行顺序，是相对与insert语句来说，由于mysql的自增原理执行完insert语句之后才将主键生成，所以这里selectKey的执行顺序为after-->
             <!--resultType:返回的主键（LAST_INSERT_ID()）是什么类型-->
             <!--LAST_INSERT_ID():是mysql的函数，返回auto_increment自增列新记录id值。-->
             <!--#{}中指定POJO参数的属性名，接收到POJO对象的属性值，Mybatis通过OGNL获取对象的属性值-->
        <!--&ndash;&gt;-->
        <!--<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">-->
            <!--select LAST_INSERT_ID()-->
        <!--</selectKey>-->

        <!--&lt;!&ndash;使用 MySQL 的 uuid()生成主键-->
            <!--执行过程：-->
            <!--首先通过uuid()得到主键，将主键设置到user对象的id属性中-->
            <!--其次执行insert时，从user对象中取出id属性值-->
        <!--&ndash;&gt;-->
        <!--&lt;!&ndash;-->
        <!--<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">-->
            <!--select uuid()-->
        <!--</selectKey>-->
        <!--insert into user(id, username, birthday, sex, address)-->
        <!--values(#{id}, #{username}, #{birthday}, #{sex}, #{address})-->
        <!--&ndash;&gt;-->

        <!--insert into user(username, birthday, sex, address)-->
        <!--values(#{username}, #{birthday}, #{sex}, #{address})-->
    <!--</insert>-->

    <!--&lt;!&ndash;根据id更新用户-->
        <!--需要输入用户的id-->
        <!--传入用户要更新的信息-->
        <!--parameterType指定user对象，包括id和更新信息，id必须存在-->
        <!--#{id}：从输入对象中获取id属性值-->
    <!--&ndash;&gt;-->
    <!--<update id="updateUserById" parameterType="com.xzm.modules.test.po.User">-->
        <!--update user set username = #{username}, birthday = #{birthday}, sex = #{sex}, address = #{address} where user.id = #{id}-->

    <!--</update>-->

    <!--&lt;!&ndash;删除用户&ndash;&gt;-->
    <!--<delete id="deleteUserById" parameterType="int">-->
        <!--delete from user where user.id = #{id}-->
    <!--</delete>-->


</mapper>
